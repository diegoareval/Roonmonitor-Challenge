// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstName String?
  lastName  String?
  password  String
  age       String?
  roles     UserRole[] @default([])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  Cart      Cart?
  Orders    Order[]
  Like      Like[]
}

enum UserRole {
  MANAGER
  CLIENT
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  category    String
  price       Float
  stock       Int
  isVisible   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  Like        Like[]
  images      ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  items     OrderItem[]
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId Int
  price     Float
  quantity  Int
}
